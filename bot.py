from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
import requests
import json
import os
import asyncio
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_URL = "https://ahihi.x10.mx/fltik.php?user={username}&key=khang"
session = requests.Session()  # T√°i s·ª≠ d·ª•ng k·∫øt n·ªëi HTTP

app = Flask(__name__)

# --- Telegram Application ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # L·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
if not TOKEN or not WEBHOOK_URL:
    raise ValueError("BOT_TOKEN v√† WEBHOOK_URL ph·∫£i ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng")

TELEGRAM_APP = Application.builder().token(TOKEN).base_url("https://proxy.accpreytb4month.workers.dev/bot").build()

# H√†m g·ª≠i th√¥ng tin ƒë·∫πp v·ªõi Markdown, ·∫£nh ƒë·∫°i di·ªán, n√∫t b·∫•m
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Nh·∫≠n l·ªánh /info t·ª´ user {update.effective_user.id} v·ªõi args: {context.args}")
    if context.args:
        username = context.args[0]
        await update.message.reply_text("‚è≥ ƒêang tra c·ª©u, vui l√≤ng ch·ªù...")
        url = API_URL.format(username=username)
        try:
            response = session.get(url, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    msg = (
                        f"*üë§ Username:* `{data['username']}`\n"
                        f"*üÜî User ID:* `{data['user_id']}`\n"
                        f"*üåç Region:* `{data['region']}`\n"
                        f"*üë• Followers:* `{data['followers_count']}`\n"
                        f"*‚û°Ô∏è Following:* `{data['following_count']}`\n"
                        f"*üìù Bio:* _{data['bio']}_\n"
                        f"*üè∑Ô∏è Nickname:* `{data['nickname']}`\n"
                        f"*üîí Private:* `{data['privateAccount']}`\n"
                    )
                    keyboard = [
                        [InlineKeyboardButton("Xem tr√™n TikTok", url=f"https://www.tiktok.com/@{data['username']}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_photo(
                        photo=data['profilePic'],
                        caption=msg,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                    logger.info(f"ƒê√£ g·ª≠i th√¥ng tin TikTok cho user {update.effective_user.id} ({username})")
                else:
                    await update.message.reply_text("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ API.")
                    logger.warning(f"API tr·∫£ v·ªÅ kh√¥ng th√†nh c√¥ng cho username: {username}")
            else:
                await update.message.reply_text("L·ªói k·∫øt n·ªëi API.")
                logger.error(f"L·ªói k·∫øt n·ªëi API v·ªõi username: {username}, status_code: {response.status_code}")
        except Exception as e:
            await update.message.reply_text("L·ªói khi truy v·∫•n API ho·∫∑c API qu√° ch·∫≠m.")
            logger.exception(f"L·ªói khi truy v·∫•n API cho username: {username}")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p username. V√≠ d·ª•: /info khangdino206")
        logger.warning("L·ªánh /info kh√¥ng c√≥ username ƒëi k√®m.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Bot ƒë√£ s·∫µn s√†ng h·ªó tr·ª£ tra c·ª©u th√¥ng tin TikTok!")
    logger.info(f"User {update.effective_user.id} ƒë√£ d√πng l·ªánh /start")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """*C√°c l·ªánh h·ªó tr·ª£:*
/help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v√† c√°c l·ªánh
/info <username> - Tra c·ª©u th√¥ng tin TikTok c·ªßa username
/start - Ch√†o bot
V√≠ d·ª•: /info khangdino206
"""
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"User {update.effective_user.id} ƒë√£ d√πng l·ªánh /help")

# Th√™m handler cho c√°c l·ªánh
TELEGRAM_APP.add_handler(CommandHandler("start", start))
TELEGRAM_APP.add_handler(CommandHandler("help", help_command))
TELEGRAM_APP.add_handler(CommandHandler("info", info))

# Flask endpoint ƒë·ªÉ ki·ªÉm tra server
@app.route("/", methods=["GET"])
def health_check():
    return jsonify({"status": "Bot is running"})

# Flask endpoint nh·∫≠n webhook t·ª´ Telegram
@app.route("/webhook", methods=["POST"])
async def webhook():
    await TELEGRAM_APP.initialize()  # ƒê·∫£m b·∫£o ƒë√£ initialize tr∆∞·ªõc khi x·ª≠ l√Ω update
    update = Update.de_json(request.get_json(force=True), TELEGRAM_APP.bot)
    await TELEGRAM_APP.process_update(update)
    return jsonify({"ok": True})

# H√†m thi·∫øt l·∫≠p webhook
async def set_webhook():
    logger.info("ƒêang thi·∫øt l·∫≠p webhook...")
    try:
        await TELEGRAM_APP.initialize()  # ƒê·∫£m b·∫£o ƒë√£ initialize tr∆∞·ªõc khi set webhook
        await TELEGRAM_APP.bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"Webhook ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng t·∫°i: {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"L·ªói khi thi·∫øt l·∫≠p webhook: {e}")

# H√†m ch·∫°y ·ª©ng d·ª•ng
def run_app():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_webhook())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == '__main__':
    run_app()