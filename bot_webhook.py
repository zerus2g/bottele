# bot_webhook.py

import sys
import os
import asyncio
import aiohttp
from flask import Flask, request

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# --- C·∫§U H√åNH ---
# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng c·ªßa Render ƒë·ªÉ b·∫£o m·∫≠t h∆°n, n·∫øu kh√¥ng c√≥ th√¨ d√πng token d·ª± ph√≤ng.
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7805035127:AAEA5bsioLvnaZKo4XoXy4P1n-VMfmaGbK0") 
API_URL_TIKTOK = "https://ahihi.x10.mx/fltik.php?user={username}&key=khang"

# --- LOGIC C·ªêT L√ïI C·ª¶A BOT ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G·ª≠i tin nh·∫Øn ch√†o m·ª´ng khi ng∆∞·ªùi d√πng g√µ /start"""
    await update.message.reply_text("Ch√†o b·∫°n! G√µ /info <username> ƒë·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n TikTok.")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /info"""
    if context.args:
        username = context.args[0]
        # G·ªçi h√†m x·ª≠ l√Ω tra c·ª©u ch√≠nh
        await handle_lookup(update, context, username)
    else:
        await update.message.reply_text("C√∫ ph√°p sai! Vui l√≤ng nh·∫≠p theo m·∫´u: /info <username>")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t 'Tra c·ª©u l·∫°i'"""
    query = update.callback_query
    await query.answer()  # Ph·∫£n h·ªìi ƒë·ªÉ n√∫t kh√¥ng b·ªã treo
    if query.data and query.data.startswith("info_"):
        username = query.data.replace("info_", "")
        # G·ªçi l·∫°i h√†m tra c·ª©u, truy·ªÅn v√†o `update` ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi tin nh·∫Øn m·ªõi
        await handle_lookup(update, context, username)

async def handle_lookup(update_or_query, context: ContextTypes.DEFAULT_TYPE, username: str):
    """
    H√†m tra c·ª©u th√¥ng tin ch√≠nh, ƒë∆∞·ª£c trang b·ªã kh·∫£ nƒÉng x·ª≠ l√Ω l·ªói to√†n di·ªán.
    """
    # X√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn ƒë·ªÉ t∆∞∆°ng t√°c (tr·∫£ l·ªùi, ch·ªânh s·ª≠a)
    if hasattr(update_or_query, 'message') and update_or_query.message:
        reply_obj = update_or_query.message
        # G·ª≠i tin nh·∫Øn ch·ªù v√† gi·ªØ l·∫°i ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c√≥ l·ªói
        status_msg = await reply_obj.reply_text("‚è≥ ƒêang tra c·ª©u, vui l√≤ng ch·ªù...")
    elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
        reply_obj = update_or_query.callback_query.message
        # Khi nh·∫•n n√∫t, g·ª≠i m·ªôt tin nh·∫Øn ch·ªù m·ªõi thay v√¨ s·ª≠a tin nh·∫Øn c≈©
        status_msg = await reply_obj.chat.send_message("‚è≥ ƒêang tra c·ª©u l·∫°i, vui l√≤ng ch·ªù...")
    else:
        # Tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn
        print("[ERROR] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn ƒë·ªÉ tr·∫£ l·ªùi.", file=sys.stderr)
        return

    # T·∫°o URL API
    api_url = API_URL_TIKTOK.format(username=username)
    print(f"[INFO] B·∫Øt ƒë·∫ßu tra c·ª©u cho user '{username}' t·∫°i URL: {api_url}", file=sys.stderr)

    try:
        # Thi·∫øt l·∫≠p timeout to√†n di·ªán cho request l√† 15 gi√¢y
        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(api_url) as response:
                # Ki·ªÉm tra xem API c√≥ tr·∫£ v·ªÅ th√†nh c√¥ng kh√¥ng
                if response.status == 200:
                    data = await response.json()
                    
                    # Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ h·ª£p l·ªá kh√¥ng
                    if data and (data.get("success") or data.get("status") == "success"):
                        # X√≥a tin nh·∫Øn ch·ªù v√† g·ª≠i k·∫øt qu·∫£
                        await status_msg.delete()
                        await send_profile_info(reply_obj, data, username)
                    else:
                        # API tr·∫£ v·ªÅ success=false ho·∫∑c th√¥ng b√°o l·ªói
                        error_message = data.get('message', 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c API g·∫∑p l·ªói.')
                        await status_msg.edit_text(f"‚ö†Ô∏è L·ªói: {error_message}")
                else:
                    # L·ªói HTTP t·ª´ server API (v√≠ d·ª•: 500, 404, 403)
                    await status_msg.edit_text(f"‚ö†Ô∏è L·ªói: Server API TikTok g·∫∑p s·ª± c·ªë (m√£ l·ªói {response.status}). Vui l√≤ng th·ª≠ l·∫°i sau.")

    except asyncio.TimeoutError:
        # L·ªói khi request m·∫•t qu√° nhi·ªÅu th·ªùi gian
        print(f"[ERROR] Request t·ªõi API b·ªã timeout cho user '{username}'.", file=sys.stderr)
        await status_msg.edit_text("‚ö†Ô∏è L·ªói: Y√™u c·∫ßu t·ªõi server API m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.")
    except aiohttp.ClientError as e:
        # C√°c l·ªói kh√°c li√™n quan ƒë·∫øn network t·ª´ aiohttp
        print(f"[ERROR] L·ªói network aiohttp khi tra c·ª©u '{username}': {e}", file=sys.stderr)
        await status_msg.edit_text("‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server API. Vui l√≤ng ki·ªÉm tra l·∫°i sau.")
    except Exception as e:
        # B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√¥ng l∆∞·ªùng tr∆∞·ªõc kh√°c
        print(f"[CRITICAL] L·ªói kh√¥ng x√°c ƒë·ªãnh khi tra c·ª©u '{username}': {e}", file=sys.stderr)
        await status_msg.edit_text("‚ö†Ô∏è L·ªói: ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.")

async def send_profile_info(reply_obj, data: dict, username: str):
    """H√†m t√°ch ri√™ng ƒë·ªÉ g·ª≠i tin nh·∫Øn ch·ª©a th√¥ng tin profile."""
    tiktok_url = f"https://www.tiktok.com/@{data.get('username', username)}"
    keyboard = [
        [InlineKeyboardButton("üîó Xem profile TikTok", url=tiktok_url)],
        [InlineKeyboardButton("üîÑ Tra c·ª©u l·∫°i", callback_data=f"info_{data.get('username', username)}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    msg = (
        f"üë§ <b>Username:</b> {data.get('username', 'N/A')}\n"
        f"üè∑Ô∏è <b>Nickname:</b> {data.get('nickname', 'N/A')}\n"
        f"üåç <b>Region:</b> {data.get('region', 'N/A')}\n"
        f"üë• <b>Followers:</b> {data.get('followers_count', data.get('followers', 'N/A'))}\n"
        f"‚û°Ô∏è <b>Following:</b> {data.get('following_count', 'N/A')}\n"
        f"üìù <b>Bio:</b> {data.get('bio', '(tr·ªëng)')}\n"
        f"üîí <b>Private Account:</b> {'Ri√™ng t∆∞' if data.get('privateAccount', False) else 'C√¥ng khai'}"
    )
    
    avatar = data.get('profilePic', data.get('profile_pic', ''))
    if avatar:
        await reply_obj.reply_photo(photo=avatar, caption=msg, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await reply_obj.reply_text(msg, parse_mode='HTML', reply_markup=reply_markup)

# --- PH·∫¶N SERVER V√Ä WEBHOOK CHO RENDER ---
server = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

# Th√™m c√°c handler
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("info", info))
application.add_handler(CallbackQueryHandler(button_callback))

@server.route("/")
def index():
    """Route ƒë·ªÉ cron-job.org g·ªçi v√†o, gi√∫p bot kh√¥ng b·ªã 'ng·ªß ƒë√¥ng'."""
    return "Bot is live and running!", 200

@server.route("/webhook", methods=["POST"])
async def webhook():
    """Route ch√≠nh nh·∫≠n update t·ª´ Telegram."""
    try:
        await application.update_queue.put(Update.de_json(request.get_json(force=True), application.bot))
    except Exception as e:
        print(f"[ERROR] L·ªói khi x·ª≠ l√Ω webhook: {e}", file=sys.stderr)
    return "OK", 200

async def setup_bot():
    """H√†m ch·∫°y m·ªôt l·∫ßn khi server kh·ªüi ƒë·ªông ƒë·ªÉ set webhook."""
    webhook_url = os.environ.get("RENDER_EXTERNAL_URL")
    if webhook_url:
        await application.bot.set_webhook(url=f"{webhook_url}/webhook")
        print(f"Webhook ƒë√£ ƒë∆∞·ª£c set t·ªõi {webhook_url}/webhook", file=sys.stderr)
    else:
        print("Kh√¥ng t√¨m th·∫•y RENDER_EXTERNAL_URL, b·ªè qua set webhook.", file=sys.stderr)

# Kh·ªüi ch·∫°y bot v√† server
if __name__ == '__main__':
    # Ch·∫°y h√†m setup m·ªôt l·∫ßn khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
    loop = asyncio.get_event_loop()
    loop.run_until_complete(setup_bot())
    
    # Gunicorn s·∫Ω ch·∫°y bi·∫øn `server` n√†y
    # D√≤ng server.run() ch·ªâ ƒë·ªÉ test tr√™n m√°y c√° nh√¢n, kh√¥ng c·∫ßn thi·∫øt khi deploy
    # server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 8080)))