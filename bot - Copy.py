import requests
import json
import os
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_URL = "https://ahihi.x10.mx/fltik.php?user={username}&key=khang"
WATCHED_USERS = ["khangdino206"]  # Danh s√°ch username c·∫ßn theo d√µi, b·∫°n c√≥ th·ªÉ th√™m v√†o ƒë√¢y
WATCHED_DATA_FILE = "watched_data.json"
NOTIFY_CHAT_ID = None  # Thay b·∫±ng chat_id Telegram b·∫°n mu·ªën nh·∫≠n th√¥ng b√°o, ho·∫∑c c·∫≠p nh·∫≠t khi bot nh·∫≠n l·ªánh /start
session = requests.Session()  # T√°i s·ª≠ d·ª•ng k·∫øt n·ªëi HTTP

# H√†m g·ª≠i th√¥ng tin ƒë·∫πp v·ªõi Markdown, ·∫£nh ƒë·∫°i di·ªán, n√∫t b·∫•m
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Nh·∫≠n l·ªánh /info t·ª´ user {update.effective_user.id} v·ªõi args: {context.args}")
    if context.args:
        username = context.args[0]
        # G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c
        await update.message.reply_text("‚è≥ ƒêang tra c·ª©u, vui l√≤ng ch·ªù...")
        url = API_URL.format(username=username)
        try:
            response = session.get(url, timeout=5)  # Gi·ªõi h·∫°n timeout
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    msg = (
                        f"*üë§ Username:* `{data['username']}`\n"
                        f"*üÜî User ID:* `{data['user_id']}`\n"
                        f"*üåç Region:* `{data['region']}`\n"
                        f"*üë• Followers:* `{data['followers_count']}`\n"
                        f"*‚û°Ô∏è Following:* `{data['following_count']}`\n"
                        f"*üìù Bio:* _{data['bio']}_\n"
                        f"*üè∑Ô∏è Nickname:* `{data['nickname']}`\n"
                        f"*üîí Private:* `{data['privateAccount']}`\n"
                    )
                    keyboard = [
                        [InlineKeyboardButton("Xem tr√™n TikTok", url=f"https://www.tiktok.com/@{data['username']}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_photo(
                        photo=data['profilePic'],
                        caption=msg,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                    logger.info(f"ƒê√£ g·ª≠i th√¥ng tin TikTok cho user {update.effective_user.id} ({username})")
                else:
                    await update.message.reply_text("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ API.")
                    logger.warning(f"API tr·∫£ v·ªÅ kh√¥ng th√†nh c√¥ng cho username: {username}")
            else:
                await update.message.reply_text("L·ªói k·∫øt n·ªëi API.")
                logger.error(f"L·ªói k·∫øt n·ªëi API v·ªõi username: {username}, status_code: {response.status_code}")
        except Exception as e:
            await update.message.reply_text("L·ªói khi truy v·∫•n API ho·∫∑c API qu√° ch·∫≠m.")
            logger.exception(f"L·ªói khi truy v·∫•n API cho username: {username}")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p username. V√≠ d·ª•: /info khangdino206")
        logger.warning("L·ªánh /info kh√¥ng c√≥ username ƒëi k√®m.")

# H√†m l∆∞u th√¥ng tin theo d√µi v√†o file
def save_watched_data(data):
    with open(WATCHED_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_watched_data():
    if os.path.exists(WATCHED_DATA_FILE):
        with open(WATCHED_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# H√†m ki·ªÉm tra thay ƒë·ªïi v√† g·ª≠i th√¥ng b√°o (d√πng cho job_queue)
async def check_and_notify(context):
    app = context.application
    watched_data = load_watched_data()
    for username in WATCHED_USERS:
        url = API_URL.format(username=username)
        try:
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    old = watched_data.get(username, {})
                    changed = []
                    if old:
                        if str(old.get("followers_count")) != str(data["followers_count"]):
                            changed.append(f"üë• Followers: {old.get('followers_count')} ‚û°Ô∏è {data['followers_count']}")
                        if old.get("bio") != data["bio"]:
                            changed.append(f"üìù Bio thay ƒë·ªïi!")
                    if changed:
                        msg = (
                            f"üîî *T√†i kho·∫£n* `{username}` *c√≥ thay ƒë·ªïi!*\n" + "\n".join(changed)
                        )
                        keyboard = [
                            [InlineKeyboardButton("Xem tr√™n TikTok", url=f"https://www.tiktok.com/@{username}")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        chat_id = NOTIFY_CHAT_ID or list(app.bot._chat_data.keys())[0] if app.bot._chat_data else None
                        if chat_id:
                            await app.bot.send_photo(
                                chat_id=chat_id,
                                photo=data['profilePic'],
                                caption=msg,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=reply_markup
                            )
                            logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o thay ƒë·ªïi cho {username} t·ªõi chat_id {chat_id}")
                    watched_data[username] = {
                        "followers_count": data["followers_count"],
                        "bio": data["bio"]
                    }
        except Exception as e:
            logger.exception(f"L·ªói khi ki·ªÉm tra thay ƒë·ªïi cho username: {username}")
    save_watched_data(watched_data)

# L·ªánh /start ƒë·ªÉ l∆∞u chat_id nh·∫≠n th√¥ng b√°o
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global NOTIFY_CHAT_ID
    NOTIFY_CHAT_ID = update.effective_chat.id
    await update.message.reply_text("Bot ƒë√£ s·∫µn s√†ng g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông!")
    logger.info(f"ƒê√£ l∆∞u chat_id nh·∫≠n th√¥ng b√°o: {NOTIFY_CHAT_ID}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """*C√°c l·ªánh h·ªó tr·ª£:*
/help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v√† c√°c l·ªánh
/info <username> - Tra c·ª©u th√¥ng tin TikTok c·ªßa username
/start - ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o t·ª± ƒë·ªông khi c√≥ thay ƒë·ªïi
V√≠ d·ª•: /info khangdino206
"""
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"User {update.effective_user.id} ƒë√£ d√πng l·ªánh /help")

if __name__ == '__main__':
    # L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    TOKEN = os.environ.get("BOT_TOKEN")
    logger.info("Kh·ªüi ƒë·ªông bot... ƒêang k·∫øt n·ªëi Telegram...")
    app = ApplicationBuilder().token(TOKEN).base_url("https://proxy.accpreytb4month.workers.dev/bot").build()
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    # ƒêƒÉng k√Ω job ƒë·ªãnh k·ª≥ m·ªói 5 ph√∫t
    app.job_queue.run_repeating(check_and_notify, interval=300, first=10)
    logger.info("Bot ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng ho·∫°t ƒë·ªông!")
    app.run_polling() 